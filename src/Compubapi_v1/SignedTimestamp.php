<?php
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: SignedTimeStamp.proto

namespace Compubapi_v1;

use Google\Protobuf\Internal\GPBUtil;

/**
 * SignedTimestamp is a timestamp associated with a message that has a
 * cryptographic signature proving that it was issued by the correct authority.
 *
 * Generated from protobuf message <code>compubapi_v1.SignedTimestamp</code>
 */
class SignedTimestamp extends \Google\Protobuf\Internal\Message
{
    /**
     * Version indicates how the digests within this object are calculated.
     *
     * Generated from protobuf field <code>int32 version = 1;</code>
     */
    private $version = 0;
    /**
     * Timestamp is the time this SignedTimestamp was issued. It is in UTC,
     * as µseconds elapsed since the epoch (µs from 1970-01-01T00:00:00Z).
     *
     * Generated from protobuf field <code>uint64 timestamp = 2;</code>
     */
    private $timestamp = 0;
    /**
     * MessageDigest is the digest of the message this timestamp is
     * associated with. The first step in verifying the timestamp is
     * ensuring the MessageDigest matches the original message data.
     * For version 1 objects, the message digest algorithm is SHA-512/224.
     *
     * Generated from protobuf field <code>bytes message_digest = 3;</code>
     */
    private $message_digest = '';
    /**
     * ChainDigest is the digest of the previous SignedTimestamp message
     * in the chain. The second step in verifying the timestamp is walking
     * back over the chain and checking each SignedTimestamp's ChainDigest
     * field. The SignedTimestamp at the beginning of the chain has this
     * field set to a specific, publish value.
     * For version 1 objects, the chain digest algorithm is HMAC-SHA-512/224,
     * with the secret being equal to the MessageDigest field.
     *
     * Generated from protobuf field <code>bytes chain_digest = 4;</code>
     */
    private $chain_digest = '';
    /**
     * ChainDigestSkip1 is only populated once every 500 nodes. It is the
     * ChainDigest value of the timestamp 500 nodes previously.
     *
     * Generated from protobuf field <code>bytes chain_digest_skip1 = 5;</code>
     */
    private $chain_digest_skip1 = '';
    /**
     * ChainDigestSkip2 is only populated once every 250000 nodes (or once
     * every 500 nodes that have ChainDigestSkip1 populated). It is the
     * ChainDigest value of the timestamp 250000 nodes previously.
     *
     * Generated from protobuf field <code>bytes chain_digest_skip2 = 6;</code>
     */
    private $chain_digest_skip2 = '';

    public function __construct() {
        \GPBMetadata\SignedTimeStamp::initOnce();
        parent::__construct();
    }

    /**
     * Version indicates how the digests within this object are calculated.
     *
     * Generated from protobuf field <code>int32 version = 1;</code>
     * @return int
     */
    public function getVersion()
    {
        return $this->version;
    }

    /**
     * Version indicates how the digests within this object are calculated.
     *
     * Generated from protobuf field <code>int32 version = 1;</code>
     * @param int $var
     * @return $this
     */
    public function setVersion($var)
    {
        GPBUtil::checkInt32($var);
        $this->version = $var;

        return $this;
    }

    /**
     * Timestamp is the time this SignedTimestamp was issued. It is in UTC,
     * as µseconds elapsed since the epoch (µs from 1970-01-01T00:00:00Z).
     *
     * Generated from protobuf field <code>uint64 timestamp = 2;</code>
     * @return int|string
     */
    public function getTimestamp()
    {
        return $this->timestamp;
    }

    /**
     * Timestamp is the time this SignedTimestamp was issued. It is in UTC,
     * as µseconds elapsed since the epoch (µs from 1970-01-01T00:00:00Z).
     *
     * Generated from protobuf field <code>uint64 timestamp = 2;</code>
     * @param int|string $var
     * @return $this
     */
    public function setTimestamp($var)
    {
        GPBUtil::checkUint64($var);
        $this->timestamp = $var;

        return $this;
    }

    /**
     * MessageDigest is the digest of the message this timestamp is
     * associated with. The first step in verifying the timestamp is
     * ensuring the MessageDigest matches the original message data.
     * For version 1 objects, the message digest algorithm is SHA-512/224.
     *
     * Generated from protobuf field <code>bytes message_digest = 3;</code>
     * @return string
     */
    public function getMessageDigest()
    {
        return $this->message_digest;
    }

    /**
     * MessageDigest is the digest of the message this timestamp is
     * associated with. The first step in verifying the timestamp is
     * ensuring the MessageDigest matches the original message data.
     * For version 1 objects, the message digest algorithm is SHA-512/224.
     *
     * Generated from protobuf field <code>bytes message_digest = 3;</code>
     * @param string $var
     * @return $this
     */
    public function setMessageDigest($var)
    {
        GPBUtil::checkString($var, False);
        $this->message_digest = $var;

        return $this;
    }

    /**
     * ChainDigest is the digest of the previous SignedTimestamp message
     * in the chain. The second step in verifying the timestamp is walking
     * back over the chain and checking each SignedTimestamp's ChainDigest
     * field. The SignedTimestamp at the beginning of the chain has this
     * field set to a specific, publish value.
     * For version 1 objects, the chain digest algorithm is HMAC-SHA-512/224,
     * with the secret being equal to the MessageDigest field.
     *
     * Generated from protobuf field <code>bytes chain_digest = 4;</code>
     * @return string
     */
    public function getChainDigest()
    {
        return $this->chain_digest;
    }

    /**
     * ChainDigest is the digest of the previous SignedTimestamp message
     * in the chain. The second step in verifying the timestamp is walking
     * back over the chain and checking each SignedTimestamp's ChainDigest
     * field. The SignedTimestamp at the beginning of the chain has this
     * field set to a specific, publish value.
     * For version 1 objects, the chain digest algorithm is HMAC-SHA-512/224,
     * with the secret being equal to the MessageDigest field.
     *
     * Generated from protobuf field <code>bytes chain_digest = 4;</code>
     * @param string $var
     * @return $this
     */
    public function setChainDigest($var)
    {
        GPBUtil::checkString($var, False);
        $this->chain_digest = $var;

        return $this;
    }

    /**
     * ChainDigestSkip1 is only populated once every 500 nodes. It is the
     * ChainDigest value of the timestamp 500 nodes previously.
     *
     * Generated from protobuf field <code>bytes chain_digest_skip1 = 5;</code>
     * @return string
     */
    public function getChainDigestSkip1()
    {
        return $this->chain_digest_skip1;
    }

    /**
     * ChainDigestSkip1 is only populated once every 500 nodes. It is the
     * ChainDigest value of the timestamp 500 nodes previously.
     *
     * Generated from protobuf field <code>bytes chain_digest_skip1 = 5;</code>
     * @param string $var
     * @return $this
     */
    public function setChainDigestSkip1($var)
    {
        GPBUtil::checkString($var, False);
        $this->chain_digest_skip1 = $var;

        return $this;
    }

    /**
     * ChainDigestSkip2 is only populated once every 250000 nodes (or once
     * every 500 nodes that have ChainDigestSkip1 populated). It is the
     * ChainDigest value of the timestamp 250000 nodes previously.
     *
     * Generated from protobuf field <code>bytes chain_digest_skip2 = 6;</code>
     * @return string
     */
    public function getChainDigestSkip2()
    {
        return $this->chain_digest_skip2;
    }

    /**
     * ChainDigestSkip2 is only populated once every 250000 nodes (or once
     * every 500 nodes that have ChainDigestSkip1 populated). It is the
     * ChainDigest value of the timestamp 250000 nodes previously.
     *
     * Generated from protobuf field <code>bytes chain_digest_skip2 = 6;</code>
     * @param string $var
     * @return $this
     */
    public function setChainDigestSkip2($var)
    {
        GPBUtil::checkString($var, False);
        $this->chain_digest_skip2 = $var;

        return $this;
    }

}

